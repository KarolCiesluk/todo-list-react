{"version":3,"sources":["GlobaleStyle.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","fillingColor","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","actions","selectTasks","StyledForm","styled","form","breakpoints","mobileMax","Input","input","colors","Button","button","primaryColor","standard","secondaryColor","hover","active","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","onChange","target","placeholder","autoFocus","List","ul","Item","li","hidden","css","Content","span","toggleDone","buttonColors","forestGreen","remove","crimson","TaskList","useSelector","map","task","onClick","Wrapper","div","doneAll","Buttons","length","disabled","every","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","className","Main","main","Container","children","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.fafabc53.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n    }\n\n    *, ::before, ::after {\n        box-sizing: inherit;\n    }\n\n    body {\n        font-family: 'Montserrat', sans-serif;\n        background: ${({theme}) => theme.fillingColor};\n    }\n`;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        tasks: [],\n        hideDone: false,\n    },\n    reducers: {\n        addTask: ({ tasks }, { payload }) => {\n            tasks.push(payload);\n        },\n        toggleHideDone: state => {\n            state.hideDone = !state.hideDone;\n        },\n        toggleTaskDone: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(({ id }) => id === payload);\n\n            tasks[index].done = !tasks[index].done;\n        },\n        removeTask: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(({ id }) => id === payload);\n\n            tasks.splice(index, 1);\n        },\n        setAllDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = true;\n            }\n        },\n    },\n});\n\nexport const {\n    addTask,\n    toggleHideDone,\n    toggleTaskDone,\n    removeTask,\n    setAllDone\n} = tasksSlice.actions;\nexport const selectTasks = state => state.tasks;\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 20px;\n\n    @media (max-width: ${({theme}) => theme.breakpoints.mobileMax}px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 1px solid ${({ theme }) => theme.colors.fillingColor};\n`;\n\nexport const Button = styled.button`\n    padding: 10px;\n    background: ${({ theme }) => theme.colors.primaryColor.standard};\n    color: ${({ theme }) => theme.colors.secondaryColor};\n    border: none;\n    transition: transform 0.3s, background 0.3s;\n\n    &:hover {\n        transform: scale(1.1);\n        background-color: ${({ theme }) => theme.colors.primaryColor.hover};\n        cursor: pointer;\n    }\n\n    &:focus {\n        outline: none;\n        background-color: ${({ theme }) => theme.colors.primaryColor.hover};\n    }\n\n    &:active {\n        background-color: ${({ theme }) => theme.colors.primaryColor.active};\n    }\n`;","import { nanoid } from \"@reduxjs/toolkit\";\nimport { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"../tasksSlice\";\nimport { StyledForm, Input, Button } from \"./styled\";\n\nconst Form = () => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const dispatch = useDispatch();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimmedNewTaskContent = newTaskContent.trim();\n\n        if (!trimmedNewTaskContent) {\n            return;\n        }\n\n        dispatch(addTask({\n            content: trimmedNewTaskContent,\n            done: false,\n            id: nanoid(),\n        }));\n\n        setNewTaskContent(\"\");\n        inputRef.current.focus();\n    };\n\n    return (\n        <StyledForm onSubmit={onFormSubmit}>\n            <Input\n                ref={inputRef}\n                value={newTaskContent}\n                onChange={({ target }) => setNewTaskContent(target.value)}\n                placeholder=\"Co jest do zrobienia?\"\n                autoFocus\n            />\n            <Button>Dodaj zadanie</Button>\n        </StyledForm>\n    );\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 10px;\n    align-items: center;\n    padding: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.fillingColor};\n\n    ${({ hidden }) => hidden && css`\n        display: none;\n    `}\n`;\n\nexport const Content = styled.span`\n    word-break: break-word;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n    `}\n`;\n\nexport const Button = styled.button`\n    border: none;\n    color: ${({ theme }) => theme.colors.secondaryColor};\n    width: 30px;\n    height: 30px;\n    padding: 0;\n    transition: background 0.3s;\n\n    ${({ toggleDone }) => toggleDone && css`\n        background: ${({ theme }) => {\n            return theme.colors.buttonColors.forestGreen.standard;\n        }};\n\n        &:hover {\n            background: ${({ theme }) => {\n            return theme.colors.buttonColors.forestGreen.hover;\n        }};\n            cursor: pointer;\n        }\n\n        &:active {\n            background: ${({ theme }) => {\n            return theme.colors.buttonColors.forestGreen.active;\n        }};\n        }\n    `}\n\n    ${({ remove }) => remove && css`\n        background: ${({ theme }) => theme.colors.buttonColors.crimson.standard};\n\n        &:hover {\n            background: ${({ theme }) => theme.colors.buttonColors.crimson.hover};\n            cursor: pointer;\n        }\n\n        &:active {\n            background: ${({ theme }) => theme.colors.buttonColors.crimson.active};\n        }\n    `}\n`;","import { useSelector, useDispatch } from \"react-redux\";\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\nimport { List, Item, Content, Button } from \"./styled\";\n\nconst TaskList = () => {\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {tasks.map(task => (\n        <Item\n          key={task.id}\n          hidden={task.done && hideDone}\n        >\n          <Button\n            onClick={() => dispatch(toggleTaskDone(task.id))}\n            toggleDone\n          >\n            {task.done ? \"✓\" : \"\"}\n          </Button>\n          <Content done={task.done}>\n            {task.content}\n          </Content>\n          <Button\n            onClick={() => dispatch(removeTask(task.id))}\n            remove\n          >\n            🗑️\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n}\n\nexport default TaskList;","import styled, { css } from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    @media (max-width: ${({theme}) => theme.breakpoints.mobileMax}px) {\n        display: grid;\n        grid-gap: 20px;\n    }\n`;\n\nexport const Button = styled.button`\n    border: none;\n    background: none;\n    color: ${({ theme }) => theme.colors.primaryColor.standard};\n    font-size: initial;\n    transition: color 0.3s;\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.primaryColor.hover};\n        cursor: pointer;\n    }\n\n    &:active {\n        color: ${({ theme }) => theme.colors.primaryColor.active};\n    }\n\n    ${({ doneAll }) => doneAll && css`\n        &:disabled {\n            color: ${({ theme }) => theme.colors.fillingColor};\n        }\n    `}\n`;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\nimport { Wrapper, Button } from \"./styled\";\n\nconst Buttons = () => {\nconst {tasks, hideDone} = useSelector(selectTasks);\nconst dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      {tasks.length > 0 && (\n        <>\n          <Button onClick={() => dispatch(toggleHideDone())}>\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n          </Button>\n          <Button\n            onClick={() => dispatch(setAllDone())}\n            doneAll\n            disabled={tasks.every(({ done }) => done)}\n          >\n            Ukończ wszystkie\n          </Button>\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section`\n    margin: 10px 0;\n    background: ${({ theme }) => theme.colors.secondaryColor};\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.fillingColor};\n`;\n\nexport const Header = styled.header`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.fillingColor};\n    padding: 20px;\n\n    @media (max-width: ${({theme}) => theme.breakpoints.mobileMax}px) {\n        grid-template-columns: 1fr;\n        grid-gap: 32px;\n    }\n`;\n\nexport const Title = styled.h2`\n    font-size: 20px;\n    margin: 0;\n`;\n\nexport const Body = styled.div`\n    padding: 20px;\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <Wrapper>\n        <Header className=\"section__header\">\n            <Title>{title}</Title>\n            {extraHeaderContent}\n        </Header>\n        <Body>\n            {body}\n        </Body>\n    </Wrapper>\n);\n\nexport default Section;","const Header = ({ title }) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const Main = styled.main`\n    max-width: 900px;\n    padding: 20px;\n    margin: 0 auto;\n`;","import { Main } from \"./styled\";\n\nconst Container = ({ children }) => (\n    <Main>\n        {children}\n    </Main>\n);\n\nexport default Container;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <TaskList />\n        }\n        extraHeaderContent={\n          <Buttons />\n        }\n      />\n    </Container>\n  );\n};\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\n\nconst App = () => <Tasks />;\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport tasksReducer from \"./features/tasks/tasksSlice\";\n\nexport default configureStore({\n    reducer: {\n        tasks: tasksReducer,\n    },\n});\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './GlobaleStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from './theme';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n    colors: {\n        primaryColor: {\n            standard: \"hsl(180deg 100% 25%)\",\n            hover: \"hsl(180, 100%, 30%)\",\n            active: \"hsl(180, 100%, 35%)\",\n        },\n        secondaryColor: \"hsl(0deg 0% 100%)\",\n        fillingColor: \"hsl(0deg 0% 87%)\",\n        buttonColors: {\n            forestGreen: {\n                standard: \"hsl(120, 61%, 34%)\",\n                hover: \"hsl(120, 61%, 39%)\",\n                active: \"hsl(120, 61%, 44%)\",\n            },\n            crimson: {\n                standard: \"hsl(348, 83%, 47%)\",\n                hover: \"hsl(348, 83%, 52%)\",\n                active: \"hsl(348, 83%, 57%)\",\n            },\n        },\n    },\n    breakpoints: {\n        mobileMax: 767,\n    },\n};"],"sourceRoot":""}