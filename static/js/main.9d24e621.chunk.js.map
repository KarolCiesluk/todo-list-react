{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","form","Input","input","Button","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","value","onChange","target","placeholder","autoFocus","List","ul","Item","li","hidden","css","Content","span","done","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","onClick","id","content","div","doneAll","Buttons","toggleHideDone","setAllDone","length","disabled","every","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","className","Main","main","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d24e621.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 20px;\n\n    @media (max-width: 767px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 1px solid #ddd;\n`;\n\nexport const Button = styled.button`\n    padding: 10px;\n    background: teal;\n    color: white;\n    border: none;\n    transition: transform 0.3s, background 0.3s;\n\n    &:hover {\n        transform: scale(1.1);\n        background-color: hsl(180, 100%, 30%);\n        cursor: pointer;\n    }\n\n    &:focus {\n        outline: none;\n        background-color: hsl(180, 100%, 35%);\n    }\n`;","import { useState } from \"react\";\nimport { Wrapper, Input, Button } from \"./styled\";\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimedTaskContent = newTaskContent.trim();\n\n        if (trimedTaskContent !== \"\") {\n            addNewTask(newTaskContent.trim());\n            setNewTaskContent(\"\");\n        }\n    };\n\n    return (\n        <Wrapper onSubmit={onFormSubmit}>\n            <Input\n                value={newTaskContent}\n                onChange={({ target }) => setNewTaskContent(target.value)}\n                placeholder=\"Co jest do zrobienia?\"\n                autoFocus\n            />\n            <Button>Dodaj zadanie</Button>\n        </Wrapper>\n    )\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 10px;\n    align-items: center;\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n\n    ${({ hidden }) => hidden && css`\n        display: none;\n    `}\n`;\n\nexport const Content = styled.span`\n    word-break: break-word;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n    `}\n`;\n\nexport const Button = styled.button`\n    border: none;\n    color: white;\n    width: 30px;\n    height: 30px;\n    padding: 0;\n    transition: background 0.3s;\n\n    ${({ toggleDone }) => toggleDone && css`\n        background: hsl(120, 61%, 34%);\n\n        &:hover {\n            background: hsl(120, 61%, 39%);\n            cursor: pointer;\n        }\n\n        &:active {\n            background: hsl(120, 61%, 44%);\n        }\n    `}\n\n    ${({ remove }) => remove && css`\n        background: hsl(348, 83%, 47%);\n\n        &:hover {\n            background: hsl(348, 83%, 52%);\n            cursor: pointer;\n        }\n\n        &:active {\n            background: hsl(348, 83%, 57%);\n        }\n    `}\n`;","import { List, Item, Content, Button } from \"./styled\";\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n  <List>\n    {tasks.map(task => (\n      <Item\n        key={task.id}\n        hidden={task.done && hideDone}\n      >\n        <Button\n          onClick={() => toggleTaskDone(task.id)}\n          toggleDone\n        >\n          {task.done ? \"✓\" : \"\"}\n        </Button>\n        <Content done={task.done}>\n          {task.content}\n        </Content>\n        <Button\n          onClick={() => removeTask(task.id)}\n          remove\n        >\n          🗑️\n        </Button>\n      </Item>\n    ))}\n  </List>\n);\n\nexport default Tasks;","import styled, { css } from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    @media (max-width: 767px) {\n        display: grid;\n        grid-gap: 20px;\n    }\n`;\n\nexport const Button = styled.button`\n    border: none;\n    background: none;\n    color: teal;\n    font-size: initial;\n    transition: color 0.3s;\n\n    &:hover {\n        color: hsl(180, 100%, 30%);\n        cursor: pointer;\n    }\n\n    &:active {\n        color: hsl(180, 100%, 35%);\n    }\n\n    ${({ doneAll }) => doneAll && css`\n        &:disabled {\n            color: #ddd;\n        }\n    `}\n`;","import React from \"react\";\nimport { Wrapper, Button } from \"./styled\";\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\n  <Wrapper>\n    {tasks.length > 0 && (\n      <>\n        <Button onClick={toggleHideDone}>\n          {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n        </Button>\n        <Button\n          onClick={setAllDone}\n          doneAll\n          disabled={tasks.every(({ done }) => done)}\n        >\n          Ukończ wszystkie\n        </Button>\n      </>\n    )}\n  </Wrapper>\n);\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section`\n    margin: 10px 0;\n    background: white;\n    box-shadow: 0 0 5px #ddd;\n`;\n\nexport const Header = styled.header`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n    border-bottom: 1px solid #ddd;\n    padding: 20px;\n\n    @media (max-width: 767px) {\n        grid-template-columns: 1fr;\n        grid-gap: 32px;\n    }\n`;\n\nexport const Title = styled.h2`\n    font-size: 20px;\n    margin: 0;\n`;\n\nexport const Body = styled.div`\n    padding: 20px;\n`;","import \"./style.css\";\nimport { Wrapper, Header, Title, Body } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <Wrapper>\n        <Header className=\"section__header\">\n            <Title>{title}</Title>\n            {extraHeaderContent}\n        </Header>\n        <Body>\n            {body}\n        </Body>\n    </Wrapper>\n);\n\nexport default Section;","const Header = ({ title }) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const Main = styled.main`\n    max-width: 900px;\n    padding: 20px;\n    margin: 0 auto;\n`;","import {Main} from \"./styled\";\n\nconst Container = ({ children }) => (\n    <Main>\n        {children}\n    </Main>\n);\n\nexport default Container;","import Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useEffect, useState } from \"react\";\n\nconst getInitialTasks = () => {\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n\n  return tasksFromLocalStorage\n    ? JSON.parse(tasksFromLocalStorage)\n    : [];\n}\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(getInitialTasks);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter((task) => task.id !== id));\n  }\n\n  const toggleHideDone = () => {\n    return setHideDone(hideDone => !hideDone);\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(\n      tasks => tasks.map(task => ({\n        ...task,\n        done: true,\n      })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n        content,\n      }\n    ])\n  };\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}