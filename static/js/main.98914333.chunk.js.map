{"version":3,"sources":["GlobaleStyle.js","Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","App.js","useTasks.js","reportWebVitals.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","form","Input","input","theme","fillingColor","Button","button","primaryColor","standard","secondaryColor","hover","active","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","current","focus","ref","value","onChange","target","placeholder","autoFocus","List","ul","Item","li","hidden","css","Content","span","done","toggleDone","buttonColors","forestGreen","remove","crimson","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","onClick","id","content","div","doneAll","Buttons","toggleHideDone","setAllDone","length","disabled","every","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","className","Main","main","Container","children","App","setHideDone","tasksFromLocalStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","useTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.98914333.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n    }\n\n    *, ::before, ::after {\n        box-sizing: inherit;\n    }\n\n    body {\n        font-family: 'Montserrat', sans-serif;\n        background: #eee;\n    }\n`;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 20px;\n\n    @media (max-width: 767px) {\n        grid-template-columns: 1fr;\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 1px solid ${({ theme }) => theme.fillingColor};\n`;\n\nexport const Button = styled.button`\n    padding: 10px;\n    background: ${({ theme }) => theme.primaryColor.standard};\n    color: ${({ theme }) => theme.secondaryColor};\n    border: none;\n    transition: transform 0.3s, background 0.3s;\n\n    &:hover {\n        transform: scale(1.1);\n        background-color: ${({ theme }) => theme.primaryColor.hover};\n        cursor: pointer;\n    }\n\n    &:focus {\n        outline: none;\n        background-color: ${({ theme }) => theme.primaryColor.hover};\n    }\n\n    &:active {\n        background-color: ${({ theme }) => theme.primaryColor.active};\n    }\n`;","import { useRef, useState } from \"react\";\nimport { Wrapper, Input, Button } from \"./styled\";\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const focusInput = () => {\n        inputRef.current.focus();\n    };\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimmedTaskContent = newTaskContent.trim();\n\n        if (trimmedTaskContent !== \"\") {\n            addNewTask(newTaskContent.trim());\n            setNewTaskContent(\"\");\n        }\n\n        focusInput();\n    };\n\n    return (\n        <Wrapper onSubmit={onFormSubmit}>\n            <Input\n                ref={inputRef}\n                value={newTaskContent}\n                onChange={({ target }) => setNewTaskContent(target.value)}\n                placeholder=\"Co jest do zrobienia?\"\n                autoFocus\n            />\n            <Button>Dodaj zadanie</Button>\n        </Wrapper>\n    );\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 10px;\n    align-items: center;\n    padding: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.fillingColor};\n\n    ${({ hidden }) => hidden && css`\n        display: none;\n    `}\n`;\n\nexport const Content = styled.span`\n    word-break: break-word;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n    `}\n`;\n\nexport const Button = styled.button`\n    border: none;\n    color: ${({ theme }) => theme.secondaryColor};\n    width: 30px;\n    height: 30px;\n    padding: 0;\n    transition: background 0.3s;\n\n    ${({ toggleDone }) => toggleDone && css`\n        background: ${({ theme }) => {\n            return theme.buttonColors.forestGreen.standard;\n        }};\n\n        &:hover {\n            background: ${({ theme }) => {\n            return theme.buttonColors.forestGreen.hover;\n        }};\n            cursor: pointer;\n        }\n\n        &:active {\n            background: ${({ theme }) => {\n            return theme.buttonColors.forestGreen.active;\n        }};\n        }\n    `}\n\n    ${({ remove }) => remove && css`\n        background: ${({ theme }) => theme.buttonColors.crimson.standard};\n\n        &:hover {\n            background: ${({ theme }) => theme.buttonColors.crimson.hover};\n            cursor: pointer;\n        }\n\n        &:active {\n            background: ${({ theme }) => theme.buttonColors.crimson.active};\n        }\n    `}\n`;","import { List, Item, Content, Button } from \"./styled\";\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n  <List>\n    {tasks.map(task => (\n      <Item\n        key={task.id}\n        hidden={task.done && hideDone}\n      >\n        <Button\n          onClick={() => toggleTaskDone(task.id)}\n          toggleDone\n        >\n          {task.done ? \"✓\" : \"\"}\n        </Button>\n        <Content done={task.done}>\n          {task.content}\n        </Content>\n        <Button\n          onClick={() => removeTask(task.id)}\n          remove\n        >\n          🗑️\n        </Button>\n      </Item>\n    ))}\n  </List>\n);\n\nexport default Tasks;","import styled, { css } from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    @media (max-width: 767px) {\n        display: grid;\n        grid-gap: 20px;\n    }\n`;\n\nexport const Button = styled.button`\n    border: none;\n    background: none;\n    color: ${({ theme }) => theme.primaryColor.standard};\n    font-size: initial;\n    transition: color 0.3s;\n\n    &:hover {\n        color: ${({ theme }) => theme.primaryColor.hover};\n        cursor: pointer;\n    }\n\n    &:active {\n        color: ${({ theme }) => theme.primaryColor.active};\n    }\n\n    ${({ doneAll }) => doneAll && css`\n        &:disabled {\n            color: ${({ theme }) => theme.fillingColor};\n        }\n    `}\n`;","import React from \"react\";\nimport { Wrapper, Button } from \"./styled\";\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\n  <Wrapper>\n    {tasks.length > 0 && (\n      <>\n        <Button onClick={toggleHideDone}>\n          {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n        </Button>\n        <Button\n          onClick={setAllDone}\n          doneAll\n          disabled={tasks.every(({ done }) => done)}\n        >\n          Ukończ wszystkie\n        </Button>\n      </>\n    )}\n  </Wrapper>\n);\n\nexport default Buttons;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section`\n    margin: 10px 0;\n    background: ${({ theme }) => theme.secondaryColor};\n    box-shadow: 0 0 5px ${({ theme }) => theme.fillingColor};\n`;\n\nexport const Header = styled.header`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n    border-bottom: 1px solid ${({ theme }) => theme.fillingColor};\n    padding: 20px;\n\n    @media (max-width: 767px) {\n        grid-template-columns: 1fr;\n        grid-gap: 32px;\n    }\n`;\n\nexport const Title = styled.h2`\n    font-size: 20px;\n    margin: 0;\n`;\n\nexport const Body = styled.div`\n    padding: 20px;\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <Wrapper>\n        <Header className=\"section__header\">\n            <Title>{title}</Title>\n            {extraHeaderContent}\n        </Header>\n        <Body>\n            {body}\n        </Body>\n    </Wrapper>\n);\n\nexport default Section;","const Header = ({ title }) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const Main = styled.main`\n    max-width: 900px;\n    padding: 20px;\n    margin: 0 auto;\n`;","import { Main } from \"./styled\";\n\nconst Container = ({ children }) => (\n    <Main>\n        {children}\n    </Main>\n);\n\nexport default Container;","import Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useState } from \"react\";\nimport { useTasks } from \"./useTasks\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    return setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask\n  } = useTasks();\n\n  return (\n      <Container>\n        <Header title=\"Lista zadań\" />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form addNewTask={addNewTask} />}\n        />\n\n        <Section\n          title=\"Lista zadań\"\n          body={\n            <Tasks\n              tasks={tasks}\n              hideDone={hideDone}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />\n          }\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              hideDone={hideDone}\n              toggleHideDone={toggleHideDone}\n              setAllDone={setAllDone}\n            />\n          }\n        />\n      </Container>\n  );\n};\n\nexport default App;\n","import { useState, useEffect } from \"react\";\n\nexport const useTasks = () => {\n    const getInitialTasks = () => {\n        const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n\n        return tasksFromLocalStorage\n            ? JSON.parse(tasksFromLocalStorage)\n            : [];\n    };\n\n    const [tasks, setTasks] = useState(getInitialTasks);\n\n    useEffect(() => {\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }, [tasks]);\n\n    const removeTask = (id) => {\n        setTasks(tasks => tasks.filter((task) => task.id !== id));\n    }\n\n    const toggleTaskDone = (id) => {\n        setTasks(tasks => tasks.map(task => {\n            if (task.id === id) {\n                return { ...task, done: !task.done };\n            }\n\n            return task;\n        }));\n    };\n\n    const setAllDone = () => {\n        setTasks(\n            tasks => tasks.map(task => ({\n                ...task,\n                done: true,\n            })));\n    };\n\n    const addNewTask = (content) => {\n        setTasks(tasks => [\n            ...tasks,\n            {\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n                content,\n            }\n        ])\n    };\n\n    return { tasks, removeTask, toggleTaskDone, setAllDone, addNewTask };\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './GlobaleStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n  <GlobalStyle />\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  </ThemeProvider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n    primaryColor: {\n        standard: \"hsl(180deg 100% 25%)\",\n        hover: \"hsl(180, 100%, 30%)\",\n        active: \"hsl(180, 100%, 35%)\",\n    },\n    secondaryColor: \"hsl(0deg 0% 100%)\",\n    fillingColor: \"hsl(0deg 0% 87%)\",\n    buttonColors: {\n        forestGreen: {\n            standard: \"hsl(120, 61%, 34%)\",\n            hover: \"hsl(120, 61%, 39%)\",\n            active: \"hsl(120, 61%, 44%)\",\n        },\n        crimson: {\n            standard: \"hsl(348, 83%, 47%)\",\n            hover: \"hsl(348, 83%, 52%)\",\n            active: \"hsl(348, 83%, 57%)\",\n        },\n    },\n};"],"sourceRoot":""}