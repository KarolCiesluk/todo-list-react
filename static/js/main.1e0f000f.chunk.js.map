{"version":3,"sources":["reportWebVitals.js","core/GlobaleStyle.js","common/Container/styled.js","common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/AuthorPage.js","features/author/aboutMe.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TaskPage/index.js","features/tasks/TasksPage/styled.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","common/routes.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","core/App/Navigation/styled.js","core/App/Navigation/index.js","core/App/index.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","core/rootSaga.js","core/store.js","index.js","core/theme.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","theme","colors","fillingColor","Main","styled","main","Container","children","Header","title","Wrapper","section","secondaryColor","header","breakpoints","mobileMax","Title","h2","Body","div","Bio","p","Section","body","extraHeaderContent","AuthorPage","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","selectAreTasksLoading","TaskPage","useParams","useSelector","find","getTaskById","content","Button","button","primaryColor","standard","hover","active","Input","input","search","css","StyledForm","form","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","nanoid","current","focus","ref","value","onChange","target","placeholder","autoFocus","toTask","useQueryParameter","searchQueryParamName","location","useLocation","URLSearchParams","get","List","ul","Item","li","hidden","Content","span","StyledLink","Link","toggleDone","buttonColors","forestGreen","remove","crimson","TaskList","query","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Buttons","isEveryTaskDone","areTasksEmpty","doneAll","disabled","Search","replaceQueryParameter","history","useHistory","key","searchParams","set","delete","pathname","toString","useReplaceQueryParameter","undefined","TasksPage","areTasksLoading","NavigationWrapper","StyledNavLink","NavLink","Navigation","App","path","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExampleTasks","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e0f000f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, ::before, ::after {\n    box-sizing: inherit;\n  }\n\n  body {\n    font-family: 'Montserrat', sans-serif;\n    background: ${({ theme }) => theme.colors.fillingColor};\n  }\n`;","import styled from \"styled-components\";\n\nexport const Main = styled.main`\n  max-width: 900px;\n  padding: 20px;\n  margin: 0 auto;\n`;","import { Main } from \"./styled\";\n\nconst Container = ({ children }) => (\n  <Main>\n    {children}\n  </Main>\n);\n\nexport default Container;","const Header = ({ title }) => (\n  <header>\n    <h1>{title}</h1>\n  </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section`\n    margin: 10px 0;\n    background: ${({ theme }) => theme.colors.secondaryColor};\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.fillingColor};\n`;\n\nexport const Header = styled.header`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.fillingColor};\n    padding: 20px;\n\n    @media (max-width: ${({theme}) => theme.breakpoints.mobileMax}px) {\n        grid-template-columns: 1fr;\n        grid-gap: 32px;\n    }\n`;\n\nexport const Title = styled.h2`\n    font-size: 20px;\n    margin: 0;\n`;\n\nexport const Body = styled.div`\n  padding: 20px;\n`;\n\nexport const Bio = styled.p`\n  line-height: 1.6;\n  margin: 0;\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n  <Wrapper>\n\n    <Header>\n      <Title>{title}</Title>\n      {extraHeaderContent}\n    </Header>\n\n    <Body>\n      {body}\n    </Body>\n\n  </Wrapper>\n);\n\nexport default Section;","import Container from \"../../common/Container\";\nimport Header from \"../../common/Header\";\nimport Section from \"../../common/Section\";\nimport { Bio } from \"../../common/Section/styled\";\nimport { aboutMe } from \"./aboutMe\";\n\nconst AuthorPage = () => (\n  <Container>\n    <Header title=\"O autorze\" />\n    <Section\n      title=\"Karol Cieśluk\"\n      body={\n        <Bio>\n          {aboutMe}\n        </Bio>\n      }\n    />\n  </Container>\n);\n\nexport default AuthorPage;\n\n","export const aboutMe = \"Jestem kontrabasistą i początkującym front-end developerem. Całą swoją uwagę koncentruję na rozwijaniu umiejętności oraz poznawaniu nowych technologii. Pisanie kodu sprawia mi ogromną satysfakcję! 😎 Moja pasja do muzyki, a także kariera artystyczna nauczyły mnie, jak ważna jest systematyczna praca oraz dbałość o szczegóły. Teraz wykorzystuję te umiejętności w rozwijaniu mojej wiedzy programistycznej. 🤓\";","const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = (tasks) => {\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n};\n\nexport const getTasksFromLocalStorage = () => {\n  return JSON.parse(localStorage.getItem(localStorageKey)) || [];\n};\n\n\n\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    tasks: getTasksFromLocalStorage(),\n    hideDone: false,\n    loading: false,\n  },\n  reducers: {\n    addTask: ({ tasks }, { payload: task }) => {\n      tasks.push(task);\n    },\n    toggleHideDone: state => {\n      state.hideDone = !state.hideDone;\n    },\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\n      const index = tasks.findIndex(({ id }) => id === taskId);\n\n      tasks[index].done = !tasks[index].done;\n    },\n    removeTask: ({ tasks }, { payload }) => {\n      const index = tasks.findIndex(({ id }) => id === payload);\n\n      tasks.splice(index, 1);\n    },\n    setAllDone: ({ tasks }) => {\n      for (const task of tasks) {\n        task.done = true;\n      }\n    },\n    fetchExampleTasks: state => {\n      state.loading = true;\n    },\n    fetchExampleTasksSuccess: (state, { payload: tasks }) => {\n      state.tasks = tasks;\n      state.loading = false;\n    },\n    fetchExampleTasksError: state => {\n      state.loading = false;\n    }\n  },\n});\n\nexport const {\n  addTask,\n  toggleHideDone,\n  toggleTaskDone,\n  removeTask,\n  setAllDone,\n  fetchExampleTasks,\n  fetchExampleTasksSuccess,\n  fetchExampleTasksError,\n} = tasksSlice.actions;\n\nexport const selectTasksState = state => state.tasks;\n\nexport const selectTasks = state => selectTasksState(state).tasks;\nexport const selectHideDone = state => selectTasksState(state).hideDone;\nexport const selectAreTasksEmpty = state => !selectTasks(state).length;\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\nexport const selectAreTasksLoading = state => selectTasksState(state).loading;\n\nexport const getTaskById = (state, taskId) =>\n  selectTasks(state).find(({ id }) => id === taskId);\n\nexport const selectTasksByQuery = (state, query) => {\n  const tasks = selectTasks(state);\n\n  if (!query || query.trim() === \"\") {\n    return tasks;\n  } else {\n    return tasks.filter(({ content }) =>\n      content.toUpperCase().includes(query.trim().toUpperCase()));\n  }\n};\n\nexport default tasksSlice.reducer;","import { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport Container from \"../../../common/Container\";\nimport Header from \"../../../common/Header\";\nimport Section from \"../../../common/Section\";\nimport { getTaskById } from \"../tasksSlice\";\n\nconst TaskPage = () => {\n  const { id } = useParams();\n  const task = useSelector(state => getTaskById(state, id));\n\n  return (\n    <Container>\n      <Header title=\"Szczegóły zadania\" />\n\n      <Section\n        title={task ? task.content : `Sorka, nie ma takiego zadania! 😛 `}\n        body={!!task && (\n          <>\n            <strong>Ukończone: </strong>{task.done ? \"Tak\" : \"Nie\"}\n          </>\n        )}\n      />\n    </Container>\n  );\n};\n\nexport default TaskPage;","import styled, { css } from \"styled-components\";\n\nexport const Button = styled.button`\n  border: none;\n  background: none;\n  color: ${({ theme }) => theme.colors.primaryColor.standard};\n  font-size: initial;\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.primaryColor.hover};\n    cursor: pointer;\n  }\n\n  &:active {\n    color: ${({ theme }) => theme.colors.primaryColor.active};\n  }\n\n  &:disabled {\n    color: ${({ theme }) => theme.colors.fillingColor};\n  }\n`;\n\nexport const Input = styled.input`\n  padding: 10px;\n  border: 1px solid ${({ theme }) => theme.colors.fillingColor};\n\n  ${({ search }) => search && css`\n    width: 100%;\n  `}\n`;","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n  display: grid;\n  grid-template-columns: 1fr auto;\n  grid-gap: 20px;\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  background: ${({ theme }) => theme.colors.primaryColor.standard};\n  color: ${({ theme }) => theme.colors.secondaryColor};\n  border: none;\n  transition: transform 0.3s, background 0.3s;\n\n  &:hover {\n    transform: scale(1.1);\n    background-color: ${({ theme }) => theme.colors.primaryColor.hover};\n    cursor: pointer;\n  }\n\n  &:focus {\n    outline: none;\n    background-color: ${({ theme }) => theme.colors.primaryColor.hover};\n  }\n\n  &:active {\n    background-color: ${({ theme }) => theme.colors.primaryColor.active};\n  }\n`;","import { nanoid } from \"@reduxjs/toolkit\";\nimport { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"../../tasksSlice\";\nimport { Input } from \"../styled\";\nimport { StyledForm, Button } from \"./styled\";\n\nconst Form = () => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n  const inputRef = useRef(null);\n\n  const dispatch = useDispatch();\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    const trimmedNewTaskContent = newTaskContent.trim();\n\n    if (!trimmedNewTaskContent) {\n      return;\n    }\n\n    dispatch(addTask({\n      content: trimmedNewTaskContent,\n      done: false,\n      id: nanoid(),\n    }));\n\n    setNewTaskContent(\"\");\n    inputRef.current.focus();\n  };\n\n  return (\n    <StyledForm onSubmit={onFormSubmit}>\n\n      <Input\n        ref={inputRef}\n        value={newTaskContent}\n        onChange={({ target }) => setNewTaskContent(target.value)}\n        placeholder=\"Co jest do zrobienia?\"\n        autoFocus\n      />\n\n      <Button>Dodaj zadanie</Button>\n    </StyledForm>\n  );\n};\n\nexport default Form;","export const toTasks = () => \"/zadania\";\nexport const toAuthor = () => \"/author\";\n\nexport const toTask = ({id} = {id: \":id\"}) => `/zadania/${id}`;","import { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useQueryParameter = (searchQueryParamName) => {\n  const location = useLocation();\n\n  return (new URLSearchParams(location.search)).get(searchQueryParamName);\n};\n\nexport const useReplaceQueryParameter = () => {\n  const location = useLocation();\n  const history = useHistory();\n\n  return ({ key, value }) => {\n    const searchParams = new URLSearchParams(location.search);\n\n    if (!value) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, value);\n    }\n\n    history.push(`${location.pathname}?${searchParams.toString()}`);\n  };\n};","const searchQueryParamName = \"szukaj\";\n\nexport default searchQueryParamName;","import { Link } from \"react-router-dom\";\nimport styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  grid-gap: 10px;\n  align-items: center;\n  padding: 10px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.fillingColor};\n\n  ${({ hidden }) => hidden && css`\n    display: none;\n  `}\n`;\n\nexport const Content = styled.span`\n  word-break: break-word;\n\n  ${({ done }) => done && css`\n    text-decoration: line-through;\n  `}\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: ${({ theme }) => theme.colors.primaryColor.standard};\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.primaryColor.hover};\n  }\n\n  &:active {\n    color: ${({ theme }) => theme.colors.primaryColor.active};\n  }\n`;\n\nexport const Button = styled.button`\n  border: none;\n  color: ${({ theme }) => theme.colors.secondaryColor};\n  width: 30px;\n  height: 30px;\n  padding: 0;\n  transition: background 0.3s;\n\n  ${({ toggleDone }) => toggleDone && css`\n    background: ${({ theme }) => theme.colors.buttonColors.forestGreen.standard};\n\n    &:hover {\n      background: ${({ theme }) => theme.colors.buttonColors.forestGreen.hover};\n      cursor: pointer;\n    }\n\n    &:active {\n      background: ${({ theme }) => theme.colors.buttonColors.forestGreen.active};\n    }\n  `};\n\n  ${({ remove }) => remove && css`\n    background: ${({ theme }) => theme.colors.buttonColors.crimson.standard};\n\n    &:hover {\n      background: ${({ theme }) => theme.colors.buttonColors.crimson.hover};\n      cursor: pointer;\n    }\n\n    &:active {\n      background: ${({ theme }) => theme.colors.buttonColors.crimson.active};\n    }\n  `};\n`;","import { useSelector, useDispatch } from \"react-redux\";\nimport { toTask } from \"../../../../common/routes\";\nimport {\n  selectHideDone,\n  toggleTaskDone,\n  removeTask,\n  selectTasksByQuery\n} from \"../../tasksSlice\";\nimport { useQueryParameter } from \"../queryParameters\";\nimport searchQueryParamName from \"../searchQueryParamName\";\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\n\nconst TaskList = () => {\n  const query = useQueryParameter(searchQueryParamName);\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\n  const hideDone = useSelector(selectHideDone);\n\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {tasks.map(task => (\n        <Item\n          key={task.id}\n          hidden={task.done && hideDone}\n        >\n\n          <Button\n            onClick={() => dispatch(toggleTaskDone(task.id))}\n            toggleDone\n          >\n            {task.done ? \"✓\" : \"\"}\n          </Button>\n\n          <Content\n            done={task.done}\n          >\n            <StyledLink to={toTask({ id: task.id })}>\n              {task.content}\n            </StyledLink>\n          </Content>\n\n          <Button\n            onClick={() => dispatch(removeTask(task.id))}\n            remove\n          >\n            🗑️\n          </Button>\n\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default TaskList;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\n    display: grid;\n    grid-gap: 20px;\n  };\n`;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button } from \"../styled\";\nimport {\n  selectHideDone,\n  selectIsEveryTaskDone,\n  selectAreTasksEmpty,\n  toggleHideDone,\n  setAllDone,\n} from \"../../tasksSlice\";\nimport { Wrapper } from \"./styled\";\n\nconst Buttons = () => {\n  const hideDone = useSelector(selectHideDone);\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\n\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      {!areTasksEmpty && (\n        <>\n          <Button onClick={() => dispatch(toggleHideDone())}>\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n          </Button>\n\n          <Button\n            onClick={() => dispatch(setAllDone())}\n            doneAll\n            disabled={isEveryTaskDone}\n          >\n            Ukończ wszystkie\n          </Button>\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Buttons;","import searchQueryParamName from \"../searchQueryParamName\";\nimport { Input } from \"../styled\";\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\n\nconst Search = () => {\n  const query = useQueryParameter(searchQueryParamName);\n  const replaceQueryParameter = useReplaceQueryParameter();\n\n  const onInputChange = ({ target }) => {\n    replaceQueryParameter({\n      key: searchQueryParamName,\n      value: target.value.trim() !== \"\" ? target.value : undefined,\n    });\n  };\n\n  return (\n    <Input\n      onChange={onInputChange}\n      value={query || \"\"}\n      placeholder=\"Filtruj zadania\"\n      search\n    />\n  );\n};\n\nexport default Search;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchExampleTasks, selectAreTasksLoading } from \"../tasksSlice\";\nimport { Button } from \"./styled\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n  const dispatch = useDispatch();\n  const areTasksLoading = useSelector(selectAreTasksLoading);\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraHeaderContent={\n          <Button\n            onClick={() => dispatch(fetchExampleTasks())}\n            disabled={areTasksLoading}\n          >\n            {\n              areTasksLoading\n                ? \"Ładowanie...\"\n                : \"Pobierz przykładowe zadania\"\n            }\n          </Button>\n        }\n      />\n\n      <Section\n        title=\"Wyszukiwarka\"\n        body={\n          <Search />\n        }\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <TaskList />\n        }\n        extraHeaderContent={\n          <Buttons />\n        }\n      />\n\n    </Container>\n  );\n};\n\nexport default TasksPage;\n","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const NavigationWrapper = styled.ul`\n  background-color: ${({ theme }) => theme.colors.primaryColor.standard};\n  margin: 0;\n  padding: 20px;\n  display: flex;\n  list-style: none;\n  justify-content: center;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  color: ${({ theme }) => theme.colors.secondaryColor};\n  margin: 20px;\n  text-decoration: none;\n\n  &.active {\n    font-weight: bold;\n  }\n`;","import { toAuthor, toTasks } from \"../../../common/routes\";\nimport { NavigationWrapper, StyledNavLink } from \"./styled\";\n\nconst Navigation = () => (\n  <nav>\n    <NavigationWrapper>\n      <li>\n        <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\n      </li>\n      <li>\n        <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\n      </li>\n    </NavigationWrapper>\n  </nav>\n);\n\nexport default Navigation;\n\n","import { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport AuthorPage from \"../../features/author/AuthorPage\";\nimport TaskPage from \"../../features/tasks/TaskPage\";\nimport TasksPage from \"../../features/tasks/TasksPage\";\nimport Navigation from \"./Navigation\";\nimport { toAuthor, toTask, toTasks } from \"../../common/routes\";\n\nconst App = () => (\n  <HashRouter>\n    <Navigation />\n\n    <Switch>\n      <Route path={toTask()}>\n        <TaskPage />\n      </Route>\n      <Route path={toTasks()}>\n        <TasksPage />\n      </Route>\n      <Route path={toAuthor()}>\n        <AuthorPage />\n      </Route>\n      <Route>\n        <Redirect to={toTasks()} />\n      </Route>\n    </Switch>\n    \n  </HashRouter>\n);\n\nexport default App;","export const getExampleTasks = async () => {\n  const response = await fetch(\"/todo-list-react/exampleTasks.json\");\n\n  if (!response.ok) {\n    new Error(response.statusText);\n  }\n\n  return await response.json();\n};","import { call, delay, put, select, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { getExampleTasks } from \"./getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\nimport { fetchExampleTasks, fetchExampleTasksError, fetchExampleTasksSuccess, selectTasks } from \"./tasksSlice\";\n\nfunction* fetchExampleTasksHandler() {\n  try {\n    yield delay(1000);\n    const exampleTasks = yield call(getExampleTasks);\n    yield put(fetchExampleTasksSuccess(exampleTasks));\n  } catch (error) {\n    yield put(fetchExampleTasksError());\n    yield call(alert, \"Coś poszło nie tak!\");\n  }\n};\n\nfunction* saveTasksInLocalStorageHandler() {\n  const tasks = yield select(selectTasks);\n  yield call(saveTasksInLocalStorage, tasks);\n};\n\nexport function* watchFetchExampleTasks() {\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n};","import { all } from \"redux-saga/effects\";\nimport { watchFetchExampleTasks } from \"../features/tasks/tasksSaga\";\n\nexport function* rootSaga() {\n  yield all([\n    watchFetchExampleTasks(),\n  ]);\n};","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport tasksReducer from \"../features/tasks/tasksSlice\";\nimport { rootSaga } from \"./rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    tasks: tasksReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from \"styled-components\";\nimport { Normalize } from 'styled-normalize';\nimport { Provider } from \"react-redux\";\nimport { theme } from \"./core/theme\";\nimport { GlobalStyle } from \"./core/GlobaleStyle\";\nimport App from './core/App';\nimport store from './core/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n  colors: {\n    primaryColor: {\n      standard: \"hsl(180deg 100% 25%)\",\n      hover: \"hsl(180, 100%, 30%)\",\n      active: \"hsl(180, 100%, 35%)\",\n    },\n    secondaryColor: \"hsl(0deg 0% 100%)\",\n    fillingColor: \"hsl(0deg 0% 87%)\",\n    buttonColors: {\n      forestGreen: {\n        standard: \"hsl(120, 61%, 34%)\",\n        hover: \"hsl(120, 61%, 39%)\",\n        active: \"hsl(120, 61%, 44%)\",\n      },\n      crimson: {\n        standard: \"hsl(348, 83%, 47%)\",\n        hover: \"hsl(348, 83%, 52%)\",\n        active: \"hsl(348, 83%, 57%)\",\n      },\n    },\n  },\n  breakpoints: {\n    mobileMax: 767,\n  },\n};"],"sourceRoot":""}