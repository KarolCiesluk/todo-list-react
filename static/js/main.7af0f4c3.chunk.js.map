{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","className","value","onChange","target","placeholder","autoFocus","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","localStorage","JSON","parse","getItem","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7af0f4c3.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./style.css\";\n\nconst Form = ({ addNewTask }) => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimedTaskContent = newTaskContent.trim();\n\n        if (trimedTaskContent !== \"\") {\n            addNewTask(newTaskContent.trim());\n            setNewTaskContent(\"\");\n        }\n    };\n\n    return (\n        <form onSubmit={onFormSubmit} className=\"form\">\n            <input\n                value={newTaskContent}\n                onChange={({ target }) => setNewTaskContent(target.value)}\n                className=\"form__input\"\n                placeholder=\"Co jest do zrobienia?\"\n                autoFocus\n            />\n            <button className=\"form__button\">Dodaj zadanie</button>\n        </form>\n    )\n};\n\nexport default Form;","import \"./style.css\";\n\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n  <ul className=\"tasks\">\n    {tasks.map(task => (\n      <li\n        key={task.id}\n        className={`tasks__item ${task.done && hideDone ? \"tasks__item--hiden\" : \"\"}`}\n      >\n        <button\n          onClick={() => toggleTaskDone(task.id)}\n          className=\"tasks__button tasks__button--toggleDone\"\n        >\n          {task.done ? \"‚úì\" : \"\"}\n        </button>\n        <span className={`tasks__content ${task.done ? \"tasks__content--done\" : \"\"}`}>\n          {task.content}\n        </span>\n        <button\n          onClick={() => removeTask(task.id)}\n          className=\"tasks__button tasks__button--remove\"\n        >\n          üóëÔ∏è\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default Tasks;","import React from \"react\";\nimport \"./style.css\";\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\n  <div className=\"buttons\">\n    {tasks.length > 0 && (\n      <>\n        <button onClick={toggleHideDone} className=\"buttons__button\">\n          {hideDone ? \"Poka≈º\" : \"Ukryj\"} uko≈Ñczone\n        </button>\n        <button\n          onClick={setAllDone}\n          className=\"buttons__button buttons__button--doneAll\"\n          disabled={tasks.every(({ done }) => done)}\n        >\n          Uko≈Ñcz wszystkie\n        </button>\n      </>\n    )}\n  </div>\n);\n\nexport default Buttons;","import \"./style.css\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <section className=\"section\">\n        <header className=\"section__header\">\n            <h2 className=\"section__title section__title--taskList\">{title}</h2>\n            {extraHeaderContent}\n        </header>\n        <div className=\"section__body\">\n            {body}\n        </div>\n    </section>\n);\n\nexport default Section;","const Header = ({ title }) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import \"./style.css\";\n\nconst Container = ({ children }) => (\n    <main className=\"container\">\n        {children}\n    </main>\n);\n\nexport default Container;","import Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useEffect, useState } from \"react\";\n\n\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const [tasks, setTasks] = useState(localStorage.length ? JSON.parse(localStorage.getItem(\"tasks\")) : []);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter((task) => task.id !== id));\n  }\n\n  const toggleHideDone = () => {\n    return setHideDone(hideDone => !hideDone);\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(\n      tasks => tasks.map(task => ({\n        ...task,\n        done: true,\n      })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length? tasks[tasks.length - 1].id + 1 : 1,\n        content,\n      }\n    ])\n  };\n\n  return (\n    <Container>\n      <Header title=\"Lista zada≈Ñ\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title=\"Lista zada≈Ñ\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}