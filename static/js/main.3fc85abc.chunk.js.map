{"version":3,"sources":["GlobaleStyle.js","common/Container/styled.js","common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/AuthorPage.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TaskPage/index.js","features/tasks/TasksPage/styled.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/Search/useQueryParameter.js","features/tasks/TasksPage/Search/useReplaceQueryParameter.js","features/tasks/TasksPage/index.js","styled.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","fillingColor","Main","styled","main","Container","children","Header","title","Wrapper","section","secondaryColor","header","breakpoints","mobileMax","Title","h2","Body","div","Section","body","extraHeaderContent","className","AuthorPage","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","areTasksLoading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","toggleTasksLoading","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","selectAreTasksLoading","TaskPage","useParams","useSelector","find","getTaskById","content","Button","button","primaryColor","standard","hover","active","Input","input","search","css","StyledForm","form","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","nanoid","current","focus","ref","value","onChange","target","placeholder","autoFocus","searchQueryParamName","List","ul","Item","li","hidden","Content","span","StyledLink","Link","toggleDone","buttonColors","forestGreen","remove","crimson","TaskList","location","useLocation","query","URLSearchParams","get","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Buttons","isEveryTaskDone","areTasksEmpty","doneAll","disabled","Search","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","key","set","delete","pathname","toString","useReplaceQueryParameter","undefined","TasksPage","Navigation","StyledNavLink","NavLink","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksSuccess","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExampleTasks","exampleTasks","all","put","delay","call","alert","select","takeLatest","type","takeEvery","rootSaga","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fc85abc.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n    }\n\n    *, ::before, ::after {\n        box-sizing: inherit;\n    }\n\n    body {\n        font-family: 'Montserrat', sans-serif;\n        background: ${({theme}) => theme.colors.fillingColor};\n    }\n`;","import styled from \"styled-components\";\n\nexport const Main = styled.main`\n    max-width: 900px;\n    padding: 20px;\n    margin: 0 auto;\n`;","import { Main } from \"./styled\";\n\nconst Container = ({ children }) => (\n    <Main>\n        {children}\n    </Main>\n);\n\nexport default Container;","const Header = ({ title }) => (\n    <header>\n        <h1>{title}</h1>\n    </header>\n);\n\nexport default Header;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section`\n    margin: 10px 0;\n    background: ${({ theme }) => theme.colors.secondaryColor};\n    box-shadow: 0 0 5px ${({ theme }) => theme.colors.fillingColor};\n`;\n\nexport const Header = styled.header`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.fillingColor};\n    padding: 20px;\n\n    @media (max-width: ${({theme}) => theme.breakpoints.mobileMax}px) {\n        grid-template-columns: 1fr;\n        grid-gap: 32px;\n    }\n`;\n\nexport const Title = styled.h2`\n    font-size: 20px;\n    margin: 0;\n`;\n\nexport const Body = styled.div`\n    padding: 20px;\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n    <Wrapper>\n        <Header className=\"section__header\">\n            <Title>{title}</Title>\n            {extraHeaderContent}\n        </Header>\n        \n        <Body>\n            {body}\n        </Body>\n    </Wrapper>\n);\n\nexport default Section;","import Container from \"../../common/Container\";\nimport Header from \"../../common/Header\";\nimport Section from \"../../common/Section\";\n\nconst AuthorPage = () => (\n    <Container>\n        <Header title=\"O autorze\" />\n        \n        <Section\n            title=\"Karol Cieśluk\"\n            body=\"lalala\"\n        />\n    </Container>\n);\n\nexport default AuthorPage;\n\n","const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = (tasks) => {\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n};\n\nexport const getTasksFromLocalStorage = () => {\n    return JSON.parse(localStorage.getItem(localStorageKey)) || [];\n};\n\n\n\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\n\nconst tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        tasks: getTasksFromLocalStorage(),\n        hideDone: false,\n        areTasksLoading: false,\n    },\n    reducers: {\n        addTask: ({ tasks }, { payload: task }) => {\n            tasks.push(task);\n        },\n        toggleHideDone: state => {\n            state.hideDone = !state.hideDone;\n        },\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\n            const index = tasks.findIndex(({ id }) => id === taskId);\n\n            tasks[index].done = !tasks[index].done;\n        },\n        removeTask: ({ tasks }, { payload }) => {\n            const index = tasks.findIndex(({ id }) => id === payload);\n\n            tasks.splice(index, 1);\n        },\n        setAllDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = true;\n            }\n        },\n        fetchExampleTasks: () => { },\n        setTasks: (state, { payload: tasks }) => {\n            state.tasks = tasks;\n        },\n        toggleTasksLoading: state => {\n            state.areTasksLoading = !state.areTasksLoading;\n        }\n    },\n});\n\nexport const {\n    addTask,\n    toggleHideDone,\n    toggleTaskDone,\n    removeTask,\n    setAllDone,\n    fetchExampleTasks,\n    setTasks,\n    toggleTasksLoading\n} = tasksSlice.actions;\n\nexport const selectTasksState = state => state.tasks;\n\nexport const selectTasks = state => selectTasksState(state).tasks;\nexport const selectHideDone = state => selectTasksState(state).hideDone;\nexport const selectAreTasksEmpty = state => !selectTasks(state).length;\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\nexport const selectAreTasksLoading = state => selectTasksState(state).areTasksLoading;\n\nexport const getTaskById = (state, taskId) =>\n    selectTasks(state).find(({ id }) => id === taskId);\n\nexport const selectTasksByQuery = (state, query) => {\n    const tasks = selectTasks(state);\n\n    if (!query || query.trim() === \"\") {\n        return tasks;\n    } else {\n        return tasks.filter(({ content }) =>\n            content.toUpperCase().includes(query.trim().toUpperCase()));\n    }\n};\n\n\nexport default tasksSlice.reducer;","import { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport Container from \"../../../common/Container\";\nimport Header from \"../../../common/Header\";\nimport Section from \"../../../common/Section\";\nimport { getTaskById } from \"../tasksSlice\";\n\nconst TaskPage = () => {\n    const { id } = useParams();\n    const task = useSelector(state => getTaskById(state, id));\n\n    return (\n        <Container>\n            <Header title=\"Szczegóły zadania\" />\n            \n            <Section\n                title={task ? task.content : `Sorka, nie ma takiego zadania! 😛 `}\n                body={\n                    task ?\n                        <><strong>Ukończone: </strong>{task.done ? \"Tak\" : \"Nie\"}</> :\n                        \"\"\n                }\n            />\n        </Container>\n    );\n};\n\nexport default TaskPage;","import styled, { css } from \"styled-components\";\n\nexport const Button = styled.button`\n    border: none;\n    background: none;\n    color: ${({ theme }) => theme.colors.primaryColor.standard};\n    font-size: initial;\n\n    &:hover {\n        color: ${({ theme }) => theme.colors.primaryColor.hover};\n        cursor: pointer;\n    };\n\n    &:active {\n        color: ${({ theme }) => theme.colors.primaryColor.active};\n    };\n\n    &:disabled {\n        color: ${({ theme }) => theme.colors.fillingColor};\n    };\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 1px solid ${({ theme }) => theme.colors.fillingColor};\n\n    ${({search}) => search && css`\n        width: 100%;\n    `};\n`;","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-gap: 20px;\n\n    @media (max-width: ${({theme}) => theme.breakpoints.mobileMax}px) {\n        grid-template-columns: 1fr;\n    };\n`;\n\nexport const Button = styled.button`\n    padding: 10px;\n    background: ${({ theme }) => theme.colors.primaryColor.standard};\n    color: ${({ theme }) => theme.colors.secondaryColor};\n    border: none;\n    transition: transform 0.3s, background 0.3s;\n\n    &:hover {\n        transform: scale(1.1);\n        background-color: ${({ theme }) => theme.colors.primaryColor.hover};\n        cursor: pointer;\n    };\n\n    &:focus {\n        outline: none;\n        background-color: ${({ theme }) => theme.colors.primaryColor.hover};\n    };\n\n    &:active {\n        background-color: ${({ theme }) => theme.colors.primaryColor.active};\n    };\n`;","import { nanoid } from \"@reduxjs/toolkit\";\nimport { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"../../tasksSlice\";\nimport { Input } from \"../styled\";\nimport { StyledForm, Button } from \"./styled\";\n\nconst Form = () => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const dispatch = useDispatch();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimmedNewTaskContent = newTaskContent.trim();\n\n        if (!trimmedNewTaskContent) {\n            return;\n        }\n\n        dispatch(addTask({\n            content: trimmedNewTaskContent,\n            done: false,\n            id: nanoid(),\n        }));\n\n        setNewTaskContent(\"\");\n        inputRef.current.focus();\n    };\n\n    return (\n        <StyledForm onSubmit={onFormSubmit}>\n            <Input\n                ref={inputRef}\n                value={newTaskContent}\n                onChange={({ target }) => setNewTaskContent(target.value)}\n                placeholder=\"Co jest do zrobienia?\"\n                autoFocus\n            />\n            \n            <Button>Dodaj zadanie</Button>\n        </StyledForm>\n    );\n};\n\nexport default Form;","const searchQueryParamName = \"szukaj\";\n\nexport default searchQueryParamName;","import { Link } from \"react-router-dom\";\nimport styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 10px;\n    align-items: center;\n    padding: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.fillingColor};\n\n    ${({ hidden }) => hidden && css`\n        display: none;\n    `};\n`;\n\nexport const Content = styled.span`\n    word-break: break-word;\n\n    ${({ done }) => done && css`\n        text-decoration: line-through;\n    `};\n`;\n\nexport const StyledLink = styled(Link)`\n    text-decoration: none;\n    color: ${({ theme }) => theme.colors.primaryColor.standard};\n\n    &:hover {\n        color: ${({theme}) => theme.colors.primaryColor.hover};\n    };\n\n    &:active {\n        color: ${({theme}) => theme.colors.primaryColor.active};\n    };\n`;\n\nexport const Button = styled.button`\n    border: none;\n    color: ${({ theme }) => theme.colors.secondaryColor};\n    width: 30px;\n    height: 30px;\n    padding: 0;\n    transition: background 0.3s;\n\n    ${({ toggleDone }) => toggleDone && css`\n        background: ${({ theme }) => {\n            return theme.colors.buttonColors.forestGreen.standard;\n        }};\n\n        &:hover {\n            background: ${({ theme }) => {\n            return theme.colors.buttonColors.forestGreen.hover;\n        }};\n            cursor: pointer;\n        };\n\n        &:active {\n            background: ${({ theme }) => {\n            return theme.colors.buttonColors.forestGreen.active;\n        }};\n        };\n    `};\n\n    ${({ remove }) => remove && css`\n        background: ${({ theme }) => theme.colors.buttonColors.crimson.standard};\n\n        &:hover {\n            background: ${({ theme }) => theme.colors.buttonColors.crimson.hover};\n            cursor: pointer;\n        };\n\n        &:active {\n            background: ${({ theme }) => theme.colors.buttonColors.crimson.active};\n        };\n    `};\n`;","import { useSelector, useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  selectHideDone,\n  toggleTaskDone,\n  removeTask,\n  selectTasksByQuery\n} from \"../../tasksSlice\";\nimport searchQueryParamName from \"../searchQueryParamName\";\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\n\nconst TaskList = () => {\n  const location = useLocation();\n  const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\n\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\n  const hideDone = useSelector(selectHideDone);\n\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {tasks.map(task => (\n        <Item\n          key={task.id}\n          hidden={task.done && hideDone}\n        >\n          <Button\n            onClick={() => dispatch(toggleTaskDone(task.id))}\n            toggleDone\n          >\n            {task.done ? \"✓\" : \"\"}\n          </Button>\n\n          <Content\n\n            done={task.done}\n          >\n            <StyledLink to={`/zadania/${task.id}`}>\n              {task.content}\n            </StyledLink>\n          </Content>\n          \n          <Button\n            onClick={() => dispatch(removeTask(task.id))}\n            remove\n          >\n            🗑️\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n}\n\nexport default TaskList;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    @media (max-width: ${({theme}) => theme.breakpoints.mobileMax}px) {\n        display: grid;\n        grid-gap: 20px;\n    };\n`;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button } from \"../styled\";\nimport {\n  selectHideDone,\n  selectIsEveryTaskDone,\n  selectAreTasksEmpty,\n  toggleHideDone,\n  setAllDone,\n} from \"../../tasksSlice\";\nimport { Wrapper } from \"./styled\";\n\nconst Buttons = () => {\n  const hideDone = useSelector(selectHideDone);\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\n\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      {!areTasksEmpty && (\n        <>\n          <Button onClick={() => dispatch(toggleHideDone())}>\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n          </Button>\n          \n          <Button\n            onClick={() => dispatch(setAllDone())}\n            doneAll\n            disabled={isEveryTaskDone}\n          >\n            Ukończ wszystkie\n          </Button>\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Buttons;","import searchQueryParamName from \"../searchQueryParamName\";\nimport { Input } from \"../styled\";\nimport { useQueryParameter } from \"./useQueryParameter\";\nimport { useReplaceQueryParameter } from \"./useReplaceQueryParameter\";\n\nconst Search = () => {\n    const query = useQueryParameter(searchQueryParamName);\n    const replaceQueryParameter = useReplaceQueryParameter();\n\n    const onInputChange = ({ target }) => {\n        replaceQueryParameter({\n            key: searchQueryParamName,\n            value: target.value.trim() !== \"\" ? target.value : undefined,\n        });\n    };\n\n    return (\n        <Input\n            onChange={onInputChange}\n            value={query || \"\"}\n            placeholder=\"Filtruj zadania\"\n            search\n        />\n    );\n};\n\nexport default Search;","import { useLocation } from \"react-router-dom\";\n\nexport const useQueryParameter = (searchQueryParamName) => {\n    const location = useLocation();\n\n    return (new URLSearchParams(location.search)).get(searchQueryParamName);\n};","import { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useReplaceQueryParameter = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const searchParams = new URLSearchParams(location.search);\n\n    return ({ key, value }) => {\n        if (!value) {\n            searchParams.delete(key);\n        } else {\n            searchParams.set(key, value);\n        }\n\n        history.push(`${location.pathname}?${searchParams.toString()}`);\n    };\n};","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchExampleTasks, selectAreTasksLoading } from \"../tasksSlice\";\nimport { Button } from \"./styled\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n  const dispatch = useDispatch();\n  const areTasksLoading = useSelector(selectAreTasksLoading);\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraHeaderContent={\n          <Button\n            onClick={() => dispatch(fetchExampleTasks())}\n            disabled={areTasksLoading}\n          >\n            {areTasksLoading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\n          </Button>\n        }\n      />\n\n      <Section\n        title=\"Wyszukiwarka\"\n        body={\n          <Search />\n        }\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <TaskList />\n        }\n        extraHeaderContent={\n          <Buttons />\n        }\n      />\n    </Container>\n  );\n};\n\nexport default TasksPage;\n","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const Navigation = styled.ul`\n    background-color: ${({theme}) => theme.colors.primaryColor.standard};\n    margin: 0;\n    padding: 20px;\n    display: flex;\n    list-style: none;\n    justify-content: center;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n    color: ${({ theme }) => theme.colors.secondaryColor};\n    margin: 20px;\n    text-decoration: none;\n\n    &.active {\n        font-weight: bold;\n    }\n`;","import { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport AuthorPage from \"./features/author/AuthorPage\";\nimport TaskPage from \"./features/tasks/TaskPage\";\nimport TasksPage from \"./features/tasks/TasksPage\";\nimport { Navigation, StyledNavLink } from \"./styled\";\n\nconst App = () => (\n    <HashRouter>\n        <Navigation>\n            <li>\n                <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\n            </li>\n            <li>\n                <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\n            </li>\n        </Navigation>\n        \n        <Switch>\n            <Route path=\"/zadania/:id\">\n                <TaskPage />\n            </Route>\n            <Route path=\"/zadania\">\n                <TasksPage />\n            </Route>\n            <Route path=\"/autor\">\n                <AuthorPage />\n            </Route>\n            <Route path=\"/\">\n                <Redirect to=\"/zadania\" />\n            </Route>\n        </Switch>\n    </HashRouter>\n);\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\n\n    if(!response.ok) {\n        new Error( response.statusText);\n    }\n\n    return await response.json();\n};","import { all, call, delay, put, select, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { getExampleTasks } from \"./getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\nimport { fetchExampleTasks, selectTasks, setTasks, toggleTasksLoading } from \"./tasksSlice\";\n\nfunction* fetchExampleTasksSuccess(exampleTasks) {\n    yield all([\n        put(setTasks(exampleTasks)),\n        put(toggleTasksLoading()),\n    ]);\n};\n\nfunction* fetchExampleTasksHandler() {\n    try {\n        yield all([\n            put(toggleTasksLoading()),\n            delay(2000),\n        ]);\n        \n        const exampleTasks = yield call(getExampleTasks);\n        yield fetchExampleTasksSuccess(exampleTasks);\n    } catch (error) {\n        yield call(alert, \"Coś poszło nie tak!\");\n    }\n};\n\nfunction* saveTasksInLocalStorageHandler() {\n    const tasks = yield select(selectTasks);\n    yield call(saveTasksInLocalStorage, tasks);\n};\n\nexport function* watchFetchExampleTasks() {\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n};","import { all } from \"redux-saga/effects\";\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\n\nexport function* rootSaga() {\n    yield all([\n        watchFetchExampleTasks(),\n    ]);\n};  ","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport tasksReducer from \"./features/tasks/tasksSlice\";\nimport { rootSaga } from \"./rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n    reducer: {\n        tasks: tasksReducer,\n    },\n    middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './GlobaleStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { theme } from './theme';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n    colors: {\n        primaryColor: {\n            standard: \"hsl(180deg 100% 25%)\",\n            hover: \"hsl(180, 100%, 30%)\",\n            active: \"hsl(180, 100%, 35%)\",\n        },\n        secondaryColor: \"hsl(0deg 0% 100%)\",\n        fillingColor: \"hsl(0deg 0% 87%)\",\n        buttonColors: {\n            forestGreen: {\n                standard: \"hsl(120, 61%, 34%)\",\n                hover: \"hsl(120, 61%, 39%)\",\n                active: \"hsl(120, 61%, 44%)\",\n            },\n            crimson: {\n                standard: \"hsl(348, 83%, 47%)\",\n                hover: \"hsl(348, 83%, 52%)\",\n                active: \"hsl(348, 83%, 57%)\",\n            },\n        },\n    },\n    breakpoints: {\n        mobileMax: 767,\n    },\n};"],"sourceRoot":""}